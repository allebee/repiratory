import streamlit as st
import os
import tensorflow as tf
from tensorflow import keras
import numpy as np
import librosa as lb
import tempfile
from tensorflow.keras.models import load_model
import plotly.graph_objects as go
from datetime import datetime
import time

# Page configuration with custom theme
st.set_page_config(
    page_title="AI Respiratory Disease Classifier",
    page_icon="ü´Å",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
        height: 3rem;
        margin-top: 1rem;
    }
    .upload-header {
        text-align: center;
        padding: 2rem;
        background: #f8f9fa;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .result-card {
        padding: 1.5rem;
        border-radius: 10px;
        background: #ffffff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin: 1rem 0;
    }
    .disclaimer {
        font-size: 0.9rem;
        color: #6c757d;
        padding: 1rem;
        border-left: 3px solid #ffc107;
        background: #fff8e1;
        margin: 1rem 0;
    }
    </style>
""", unsafe_allow_html=True)

# Sidebar with app information
with st.sidebar:
    st.image("https://img.icons8.com/color/96/000000/stethoscope.png", width=96)
    st.title("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    st.markdown("""
    ### –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –∑–∞–ø–∏—Å—å—é –¥—ã—Ö–∞–Ω–∏—è
    2. AI –º–æ–¥–µ–ª—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–≤—É–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
    
    ### –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:
    - üå¨Ô∏è –ê—Å—Ç–º–∞
    - ü´Å –ë—Ä–æ–Ω—Ö–æ—ç–∫—Ç–∞–∑
    - üî¨ –ë—Ä–æ–Ω—Ö–∏–æ–ª–∏—Ç
    - ü´ß –•–û–ë–õ
    - ü¶† –ò–ù–î–ü
    - üå°Ô∏è –ò–í–î–ü
    - ü´Ä –ü–Ω–µ–≤–º–æ–Ω–∏—è
    """)
    
    st.markdown("---")
    st.markdown("### –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")
    if 'history' not in st.session_state:
        st.session_state.history = []
    
    for item in st.session_state.history[-5:]:  # Show last 5 analyses
        st.markdown(f"""
        üìä **{item['date']}**  
        –î–∏–∞–≥–Ω–æ–∑: {item['diagnosis']}  
        –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {item['probability']:.1f}%
        """)

@st.cache_resource
def load_classification_model():
    """Load the trained model"""
    try:
        # Define possible model paths
        model_paths = [
            'model2.h5',
            'models/model2.h5',
            os.path.join(os.getcwd(), 'model2.h5')
        ]
        
        # Try each path
        for path in model_paths:
            if os.path.exists(path):
                return load_model(path)
        
        st.error("Model file not found. Please ensure the model is uploaded to the app directory.")
        st.stop()
    except Exception as e:
        st.error(f"Error loading model: {str(e)}")
        st.stop()

def create_gauge_chart(value, title):
    """Create a gauge chart for probability visualization"""
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=value,
        title={'text': title},
        domain={'x': [0, 1], 'y': [0, 1]},
        gauge={
            'axis': {'range': [None, 100]},
            'bar': {'color': "darkblue"},
            'steps': [
                {'range': [0, 30], 'color': "lightgray"},
                {'range': [30, 70], 'color': "gray"},
                {'range': [70, 100], 'color': "darkgray"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 90
            }
        }
    ))
    
    fig.update_layout(height=300)
    return fig

def get_features_for_neural_network(path):
    """Extract audio features with progress tracking"""
    with st.spinner('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...'):
        sound_arr, sample_rate = lb.load(path)
        mfcc = lb.feature.mfcc(y=sound_arr, sr=sample_rate)
        cstft = lb.feature.chroma_stft(y=sound_arr, sr=sample_rate)
        mspec = lb.feature.melspectrogram(y=sound_arr, sr=sample_rate)
        return mfcc, cstft, mspec

def classify_audio(audio_path, model):
    """Classify audio with enhanced error handling and progress tracking"""
    try:
        # Feature extraction
        mfcc_test, croma_test, mspec_test = get_features_for_neural_network(audio_path)
        
        # Prepare input arrays
        mfcc, cstft, mspec = [], [], []
        mfcc.append(mfcc_test)
        cstft.append(croma_test)
        mspec.append(mspec_test)

        mfcc_test = np.array(mfcc)
        cstft_test = np.array(cstft)
        mspec_test = np.array(mspec)

        # Model prediction
        with st.spinner('AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ...'):
            result = model.predict({
                "mfcc": mfcc_test,
                "croma": cstft_test,
                "mspec": mspec_test
            })

        # Process results
        disease_array = ['–ê—Å—Ç–º–∞', '–ë—Ä–æ–Ω—Ö–æ—ç–∫—Ç–∞–∑', '–ë—Ä–æ–Ω—Ö–∏–æ–ª–∏—Ç', '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –æ–±—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –±–æ–ª–µ–∑–Ω—å –ª—ë–≥–∫–∏—Ö', 
                        '–ó–¥–æ—Ä–æ–≤', '–ò–Ω—Ñ–µ–∫—Ü–∏–∏ –Ω–∏–∂–Ω–∏—Ö –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π', '–ü–Ω–µ–≤–º–æ–Ω–∏—è', '–ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–∏—Ö –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π']
        result = result.flatten()
        
        # Get top-3 predictions
        sorted_indices = np.argsort(result)[::-1][:3]
        
        return [
            {
                'disorder': disease_array[idx],
                'probability': result[idx] * 100
            }
            for idx in sorted_indices
        ]
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {str(e)}")
        return None

def main():
    # Main page header
    st.title("ü´Å AI –ê–Ω–∞–ª–∏–∑ –†–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–π")
    st.markdown("""
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–≤—É–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
    –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥—ã—Ö–∞–Ω–∏—è.
    """)

    # Model loading
    try:
        model = load_classification_model()
    except Exception as e:
        st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏.")
        return

    # File uploader with clear instructions
    st.markdown("""
    <div class="upload-header">
        <h3>üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞</h3>
        <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç WAV</p>
    </div>
    """, unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader("", type=['wav'])

    if uploaded_file is not None:
        # Create columns for better layout
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.audio(uploaded_file, format='audio/wav')
        
        with col2:
            st.markdown("""
            **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:**  
            - –ò–º—è: {}  
            - –†–∞–∑–º–µ—Ä: {:.2f} MB
            """.format(
                uploaded_file.name,
                uploaded_file.size / (1024*1024)
            ))

        # Analysis button
        if st.button("üî¨ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", key="analyze_button"):
            # Progress tracking
            progress_text = "–û–ø–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            my_bar = st.progress(0, text=progress_text)

            # Temporary file handling
            with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                temp_path = tmp_file.name

            # Analysis process with visual feedback
            for percent_complete in range(100):
                time.sleep(0.01)
                my_bar.progress(percent_complete + 1, text=progress_text)
            
            # Get classification results
            results = classify_audio(temp_path, model)
            os.unlink(temp_path)

            if results:
                # Update session history
                st.session_state.history.append({
                    'date': datetime.now().strftime("%Y-%m-%d %H:%M"),
                    'diagnosis': results[0]['disorder'],
                    'probability': results[0]['probability']
                })

                # Display results in an organized layout
                st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                
                # Primary result with gauge chart
                st.markdown("""
                <div class="result-card">
                    <h4>–û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ–∑</h4>
                </div>
                """, unsafe_allow_html=True)
                
                primary = results[0]
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.plotly_chart(create_gauge_chart(
                        primary['probability'],
                        primary['disorder']
                    ), use_container_width=True)
                
                with col2:
                    st.markdown(f"""
                    ### {primary['disorder']}
                    –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: **{primary['probability']:.1f}%**
                    
                    *–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ*
                    """)

                # Secondary results
                st.markdown("#### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã:")
                cols = st.columns(len(results[1:]))
                for idx, result in enumerate(results[1:]):
                    with cols[idx]:
                        st.markdown(f"""
                        <div class="result-card">
                            <h5>{result['disorder']}</h5>
                            <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result['probability']:.1f}%</p>
                        </div>
                        """, unsafe_allow_html=True)

                # Disclaimer
                st.markdown("""
                <div class="disclaimer">
                    ‚ö†Ô∏è <strong>–í–∞–∂–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong><br>
                    –î–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç 
                    –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É 
                    –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞.
                </div>
                """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()